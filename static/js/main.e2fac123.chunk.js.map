{"version":3,"sources":["components/card/questionicon.png","components/card/Card.js","hooks/useCards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","card","image","open","index","onClick","className","e","style","borderRadius","src","alt","icon","generateCards","console","log","cards","i","push","id","arr","temp","ctr","length","randomNumber","Math","random","floor","shuffledCards","App","useState","lastFlipped","setLastFlipped","setCards","openCards","setOpenCards","flip","curr","tempCards","oc","setTimeout","useCards","guessed","setGuessed","won","setWon","map","c","key","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,0C,wLCyB5BC,EAtBF,SAAC,GAA2C,IAAD,IAAzCC,KAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAEvC,OACI,yBAAKC,UAAU,YAAYD,QAAS,SAAAE,GAAC,OAAIF,EAAQE,EAAGH,KAChD,yBAAKE,UAAU,mBAEXH,EAAO,yBAAKG,UAAU,mBAClB,yBAAKE,MAAO,CAAEC,aAAc,IAAMC,IAAKR,EAAOS,IAAI,MAGtD,yBAAKL,UAAU,kBACX,yBAAKI,IAAKE,IAAMD,IAAI,SCMxC,SAASE,IACLC,QAAQC,IAAI,sBAEZ,IADA,IAAMC,EAAQ,GACNC,EAAE,EAAGA,EAAE,GAAIA,GAAK,EACpBD,EAAME,KAAK,CAACC,GAAIF,EAAGf,MAAM,8BAAD,OAAgCe,EAAhC,YAA6Cd,MAAM,IAC3Ea,EAAME,KAAK,CAACC,GAAIF,EAAE,EAAGf,MAAM,8BAAD,OAAgCe,EAAhC,YAA6Cd,MAAM,IAGjF,OA1BJ,SAAuBiB,GACnBN,QAAQC,IAAI,qBAGZ,IAFA,IACIM,EAAMjB,EADNkB,EAAMF,EAAIG,OAEPD,EAAM,GAAG,CACZ,IAAME,EAAeC,KAAKC,SAE1BtB,EAAQqB,KAAKE,MAAMH,EAAeF,GAGlCD,EAAOD,IAFPE,GAGAF,EAAIE,GAAOF,EAAIhB,GACfgB,EAAIhB,GAASiB,EAEjB,OAAOD,EAYAQ,CAAcZ,GCqBVa,MA5Cf,WAAgB,IAAD,ED0BA,WAAW,IAAD,EAGiBC,oBAAU,GAH3B,mBAGdC,EAHc,KAGDC,EAHC,OAIKF,mBAASjB,GAJd,mBAIdG,EAJc,KAIPiB,EAJO,OAKaH,mBAAS,GALtB,mBAKdI,EALc,KAKHC,EALG,KA0BrB,MAAO,CACHnB,QACAoB,KArBJ,SAAcC,GAAM,IAAD,EACXC,EAAYtB,EAChBsB,EAAUD,GAAMlC,MAAO,EACvB,IAAIoC,EAAKL,EAYT,OAXGI,EAAUD,GAAMnC,SAAhB,UAA0BoC,EAAUP,UAApC,aAA0B,EAAwB7B,OAC7CoC,EAAUP,GAAa5B,OACvBmC,EAAUP,GAAa5B,MAAO,EAC9BgC,EAAaD,EAAU,GACvBK,GAAM,GAGVC,YAAW,WAAMF,EAAUD,GAAMlC,MAAO,IAAQ,KAEpD6B,EAAeK,GACfJ,EAASK,GACFC,GAOPL,aCtDcO,GAAfzB,EADQ,EACRA,MAAOoB,EADC,EACDA,KADC,EAEiBN,mBAAS,GAF1B,mBAENY,EAFM,KAEGC,EAFH,OAISb,oBAAS,GAJlB,mBAINc,EAJM,KAIDC,EAJC,KAMPxC,EAAU,SAACE,EAAGH,GAChB,IAAID,EAAOiC,EAAKhC,GACbD,IAASa,EAAMO,QAChBiB,YAAW,kBAAKK,GAAO,KAAO,KAEhCF,EAAWxC,IAIf,OACE,yBAAKG,UAAU,cAEVsC,GAAO5B,EACN,kBAAC,WAAD,KACE,4BAAK0B,EAAL,UACA,6BACA,yBAAKpC,UAAU,mBAEZU,EAAM8B,KAAI,SAACC,EAAG3C,GAAJ,OACV,kBAAC,EAAD,CAAM4C,IAAKD,EAAE5B,GAAIlB,KAAM8C,EAAG3C,MAAOA,EAAQC,QAASA,SASvD,yBAAKC,UAAU,aACb,wBAAIE,MAAO,CAACyC,MAAO,YAAnB,yBC5BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.e2fac123.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/questionicon.cae81e62.png\";","import React from 'react'\nimport icon from './questionicon.png'\n\nconst Card = ({card: {image, open}, index, onClick}) => {\n\n    return (\n        <div className='flip-card' onClick={e => onClick(e, index)}>\n            <div className=\"flip-card-inner\" >\n                {\n                open ? <div className='flip-card-front'>\n                    <img style={{ borderRadius: 10 }} src={image} alt=\"\" />\n                </div>\n                  :\n                <div className='flip-card-back'>\n                    <img src={icon} alt=\"\" />\n                </div>\n                }\n            </div>\n        </div>\n    )\n}\n    \n       \n   \n\nexport default Card\n","import {useState} from 'react'\n\nfunction shuffledCards(arr){\n    console.log('Being Shuffled...')\n    let ctr = arr.length;\n    let temp, index;\n    while (ctr > 0) {\n        const randomNumber = Math.random()\n\n        index = Math.floor(randomNumber * ctr)\n        ctr--;\n\n        temp = arr[ctr]\n        arr[ctr] = arr[index];\n        arr[index] = temp;\n    }\n    return arr\n}\n\n\nfunction generateCards(){\n    console.log('Being Generated...')\n    const cards = []\n    for(let i=1; i<19; i += 2){\n        cards.push({id: i, image: `https://picsum.photos/seed/${i}/150/250`, open: false})\n        cards.push({id: i+1, image: `https://picsum.photos/seed/${i}/150/250`, open: false})\n    }\n\n    return shuffledCards(cards)\n}\n\nexport default function(){\n\n\n    const [lastFlipped, setLastFlipped] = useState(-1)\n    const [cards, setCards] = useState(generateCards)\n    const [openCards, setOpenCards] = useState(0)\n    \n    function flip(curr){\n        let tempCards = cards\n        tempCards[curr].open = true\n        let oc = openCards\n        if(tempCards[curr].image === tempCards[lastFlipped]?.image){\n            if(!tempCards[lastFlipped].open){\n                tempCards[lastFlipped].open = true\n                setOpenCards(openCards+2)\n                oc += 2 \n            }     \n        }else{\n            setTimeout(()=> {tempCards[curr].open = false}, 800)\n        }\n        setLastFlipped(curr)\n        setCards(tempCards)\n        return oc;\n    }\n\n   \n    return { \n        cards,\n        flip,\n        openCards   \n    }\n\n}","import React, {useState, Fragment} from 'react';\nimport './App.css';\nimport Card from './components/card/Card'\nimport useCards from './hooks/useCards'\n\nfunction App() {\n  let {cards, flip} = useCards()\n  const [guessed, setGuessed] = useState(0)\n\n  const [won, setWon] = useState(false)\n  \n  const onClick = (e, index) => {\n      let open = flip(index)\n      if(open === cards.length){\n        setTimeout(()=> setWon(true), 1000)\n      } \n      setGuessed(open)    \n  }\n\n\n  return (\n    <div className='container'>\n       {\n        !won && cards ? (\n          <Fragment>\n            <h1>{guessed} of 16</h1>\n            <br/>\n            <div className='cards-container'>\n           {\n               cards.map((c, index) =>\n               <Card key={c.id} card={c} index={index}  onClick={onClick}/>\n             \n             )\n           }\n           </div>\n          </Fragment>\n         \n        )\n        : (\n          <div className='win-label'>\n            <h1 style={{color: '#f50000'}}>YOU WON THE GAME!!</h1>\n          </div> \n        )\n       }\n       \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}